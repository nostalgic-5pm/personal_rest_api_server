//// File: crates/v1/src/config.rs
use crate::error::{AppError, AppResult};
use config::{Config, Environment, File};
use dotenvy::dotenv;
use serde::Deserialize;
use std::path::PathBuf;
use tracing::{info, warn};
use tracing_subscriber::filter::LevelFilter;
use urlencoding::encode;

#[derive(Debug, Deserialize)]
pub struct AppConfig {
    pub app: App,
    pub postgres: Postgres,
    pub logging: Logging,
}

/// [app] section
#[derive(Debug, Deserialize)]
pub struct App {
    pub host: String,
    pub version: String,
    pub port: u16,
}

/// [postgres] section
#[derive(Debug, Deserialize)]
pub struct Postgres {
    pub host: String,
    pub port: u16,
    pub name: String,
    pub user: String,
    pub password: String,
    pub max_connections: u32,
}

/// [logging] section
#[derive(Debug, Deserialize)]
pub struct Logging {
    /// Logging level. Allowed values: "error", "warn", "info", "debug", "trace"
    pub level: String,
    /// Logging format. Allowed values: "json", "plain"
    pub format: String,
}

impl Logging {
    /// LevelをtracingのLevelに変換して返す。
    pub fn level_filter(&self) -> LevelFilter {
        match self.level.to_lowercase().as_str() {
            "error" => LevelFilter::ERROR,
            "warn" => LevelFilter::WARN,
            "info" => LevelFilter::INFO,
            "debug" => LevelFilter::DEBUG,
            "trace" => LevelFilter::TRACE,
            // 設定値が上記に存在しない場合は，infoを返す。
            other => {
                warn!("Unknown log level '{}', defaulting to INFO", other);
                LevelFilter::INFO
            }
        }
    }

    /// ログのフォーマットがJSONか，それ以外(PRETTY)か判定する。
    /// JSONの場合は，Trueを返す。
    pub fn is_json(&self) -> bool {
        matches!(self.format.to_lowercase().as_str(), "json" | "structured")
    }
}

impl AppConfig {
    /// Read defaults.toml → development.toml → environment variables in this order
    pub fn new() -> AppResult<Self> {
        // Read environment variables, but don't error if .env is missing
        if dotenv().is_err() {
            warn!(".env file not found or failed to load");
        }

        let config_dir = Self::workspace_root()?;
        info!("Loading configuration from {:?}", config_dir);

        let builder = Config::builder()
            .add_source(File::from(config_dir.join("defaults.toml")).required(true))
            .add_source(File::from(config_dir.join("development.toml")).required(false))
            .add_source(Environment::with_prefix("APP").separator("__"))
            .add_source(Environment::with_prefix("POSTGRES").separator("__"))
            .add_source(Environment::with_prefix("LOGGING").separator("__"));

        builder
            .build()
            .map_err(|e| {
                AppError::InternalServerError(Some(format!(
                    "Failed to build configuration from files and environment: {}",
                    e
                )))
            })?
            .try_deserialize()
            .map_err(|e| {
                AppError::InternalServerError(Some(format!(
                    "Failed to deserialize configuration into AppConfig struct: {}",
                    e
                )))
            })
    }

    /// postgres接続用URLを組立てて返す。
    pub fn get_postgres_url(&self) -> String {
        format!(
            "postgres://{}:{}@{}:{}/{}",
            self.postgres.user,
            encode(&self.postgres.password), // passwordはエンコードする。
            self.postgres.host,
            self.postgres.port,
            self.postgres.name
        )
    }

    pub fn get_masked_postgres_url(&self) -> String {
        let masked_user = self.postgres.user.chars().next().unwrap_or('_');
        let masked_pass = "**".to_string();
        let masked_host = self.postgres.host.chars().next().unwrap_or('_');
        let masked_port = self.postgres.port.to_string().chars().next().unwrap_or('_'); //一桁目のみ
        let masked_name = self.postgres.name.chars().next().unwrap_or('_');
        format!(
            "postgres://{}*:{}@{}*:{}*/{}*",
            masked_user, masked_pass, masked_host, masked_port, masked_name
        )
    }

    fn workspace_root() -> AppResult<PathBuf> {
        let manifest_dir = PathBuf::from(env!("CARGO_MANIFEST_DIR"));
        let root = manifest_dir
            .parent() // crates
            .and_then(|p| p.parent()) // workspace root
            .ok_or_else(|| {
                AppError::InternalServerError(Some(
                    "Failed to locate workspace root from CARGO_MANIFEST_DIR".into(),
                ))
            })?;
        let config_dir = root.join("config");
        if !config_dir.is_dir() {
            return Err(AppError::InternalServerError(Some(format!(
                "Expected config directory at {:?}, but not found",
                config_dir
            ))));
        }
        Ok(config_dir)
    }
}

#[cfg(test)]
mod tests {
    use super::AppConfig;
    /// AppConfig が正常に読み込めるか確認し、内容を表示
    #[test]
    fn print_app_config() {
        let cfg = AppConfig::new().expect("Failed to load AppConfig");
        println!("{:#?}", cfg);
    }
}


//// File: crates/v1/src/error.rs
//! アプリケーション全体で使用するエラー型及び変換ロジックを集約するモジュール。

use crate::presentation::common_dto::ApiError;
use AppError::*;
use argon2::password_hash::Error as Argon2Error;
use axum::{
    Json,
    http::StatusCode,
    response::{IntoResponse, Response},
};
use chrono::Utc;
use sqlx::Error as SqlxError;
use thiserror::Error;
use tracing::*;

/// プロジェクト全体で使用するResult型。
pub type AppResult<T> = Result<T, AppError>;

/// PostgreSQLのSQLSTATEコード定数。
pub mod sqlx_error_code {
    pub const UNIQUE_VIOLATION: &str = "23505";
    pub const FK_VIOLATION: &str = "23503";
    pub const NOT_NULL_VIOLATION: &str = "23502";
    pub const CHECK_VIOLATION: &str = "23514";
}

/// アプリケーション全体で使用される上位エラー型。
/// 各バリアントは対応する<HTTP Status Code>とOpt.の<Detail>を持つ。
#[derive(Debug, Error)]
pub enum AppError {
    #[error("Bad Request")]
    BadRequest(Option<String>),
    #[error("Unauthorized")]
    Unauthorized(Option<String>),
    #[error("Forbidden")]
    Forbidden(Option<String>),
    #[error("Not Found")]
    NotFound(Option<String>),
    #[error("Request Timeout")]
    RequestTimeout(Option<String>),
    #[error("Conflict")]
    Conflict(Option<String>),
    #[error("I'm a Teapot")]
    ImATeapot(Option<String>),
    /// validation error
    #[error("Unprocessable Content")]
    UnprocessableContent(Option<String>),
    #[error("Internal Server Error")]
    InternalServerError(Option<String>),
}

impl AppError {
    /// AppErrorを<HTTP Status Code>に変換する。
    pub fn status_code(&self) -> StatusCode {
        use AppError::*;
        match self {
            BadRequest(_) => StatusCode::BAD_REQUEST,
            Unauthorized(_) => StatusCode::UNAUTHORIZED,
            Forbidden(_) => StatusCode::FORBIDDEN,
            NotFound(_) => StatusCode::NOT_FOUND,
            RequestTimeout(_) => StatusCode::REQUEST_TIMEOUT,
            Conflict(_) => StatusCode::CONFLICT,
            ImATeapot(_) => StatusCode::IM_A_TEAPOT,
            UnprocessableContent(_) => StatusCode::UNPROCESSABLE_ENTITY,
            InternalServerError(_) => StatusCode::INTERNAL_SERVER_ERROR,
        }
    }
    /// AppErrorが持つ<Detail>を返す（無ければ None）。
    pub fn detail(&self) -> Option<&String> {
        match self {
            BadRequest(d)
            | Unauthorized(d)
            | Forbidden(d)
            | NotFound(d)
            | RequestTimeout(d)
            | Conflict(d)
            | ImATeapot(d)
            | UnprocessableContent(d)
            | InternalServerError(d) => d.as_ref(),
        }
    }
}

impl IntoResponse for AppError {
    /// AppErrorをaxumの<HTTP Response>に変換する。
    fn into_response(self) -> Response {
        let status = self.status_code();

        // ログ出力（500系はerror、それ以外はwarn）
        if status.is_server_error() {
            error!(?self, "internal server error");
        } else {
            warn!(?self, "client error");
        }

        // Statusに応じてResponse Bodyを構築（500系には<Detail>を含めない）
        let body = if status.is_server_error() {
            ApiError {
                status: status.as_u16(),
                message: status
                    .canonical_reason()
                    .unwrap_or("Internal Server Error")
                    .to_string(),
                detail: None,
                instance: None,
                timestamp: Utc::now().timestamp(),
            }
        } else {
            ApiError {
                status: status.as_u16(),
                message: status.canonical_reason().unwrap_or("Error").to_string(),
                detail: self.detail().cloned(),
                instance: None,
                timestamp: Utc::now().timestamp(),
            }
        };

        (status, Json(body)).into_response()
    }
}

/// sqlx のエラーをAppErrorに変換する。
impl From<SqlxError> for AppError {
    fn from(e: SqlxError) -> Self {
        // エラーを文字列化する。
        let e_str = e.to_string();

        match e {
            SqlxError::RowNotFound => AppError::NotFound(Some("Resource not found".into())),
            SqlxError::PoolTimedOut => AppError::RequestTimeout(Some("Database timeout".into())),
            SqlxError::Database(db_err) => match db_err.code().unwrap_or_default().as_ref() {
                sqlx_error_code::UNIQUE_VIOLATION => {
                    AppError::Conflict(Some("Duplicate key".into()))
                }
                sqlx_error_code::FK_VIOLATION => {
                    AppError::Conflict(Some("Foreign-key violation".into()))
                }
                sqlx_error_code::NOT_NULL_VIOLATION => {
                    AppError::BadRequest(Some("Null value in column".into()))
                }
                sqlx_error_code::CHECK_VIOLATION => {
                    AppError::UnprocessableContent(Some("Check violation".into()))
                }
                code => AppError::InternalServerError(Some(format!(
                    "Database error ({code}): {}",
                    db_err.message()
                ))),
            },
            // 文字列に"timeout"が含まれていれば408エラー。
            _ if e_str.contains("timeout") => {
                AppError::RequestTimeout(Some("Database timeout".into()))
            }

            // その他不明なエラー。
            other => AppError::InternalServerError(Some(format!("DB error: {other}"))),
        }
    }
}

/// パスワードのハッシュ化・検証に関連するエラー。
#[derive(Debug, Error)]
pub enum HashingError {
    #[error("Password mismatch")]
    PasswordMismatch,
    #[error("Argon2 error: {0}")]
    Argon2(#[from] Argon2Error),
}

/// ドメイン層で使用されるデータベース関連のエラー。
#[derive(Debug, Error)]
pub enum DatabaseError {
    #[error("Row not found")]
    NotFound,
    #[error(transparent)]
    Sqlx(#[from] SqlxError),
}


//// File: crates/v1/src/lib.rs
pub mod config;
pub mod error;
pub mod presentation;


//// File: crates/v1/src/main.rs
use axum::{Router, extract::Extension, routing::get};
use sqlx::postgres::PgPoolOptions;
use std::net::{IpAddr, SocketAddr};
use tokio::{net::TcpListener, signal};
use tracing::info;
use tracing_subscriber::{
    fmt::{self, time::UtcTime},
    layer::SubscriberExt,
    util::SubscriberInitExt,
};
use v1::{
    config::{AppConfig, Logging},
    error::{AppError, AppResult},
};

#[tokio::main]
async fn main() -> AppResult<()> {
    // Configを読み込む
    let config = AppConfig::new()?;
    // Tracingの初期化
    init_tracing(&config.logging);
    info!("Configuration loaded: version {}", config.app.version);

    // postgres接続
    let postgres_url = config.get_postgres_url();
    let postgres_pool = PgPoolOptions::new()
        .connect(&postgres_url)
        .await
        .map_err(|e| {
            AppError::InternalServerError(Some(format!("Failed to connect with postgres: {}", e)))
        })?;
    info!(
        "Connected to the postgres: {}",
        config.get_masked_postgres_url()
    );

    let app = Router::new()
        .route("/", get(root))
        .layer(Extension(postgres_pool));

    // Construct a socket address by combining host and port
    let ip: IpAddr =
        config.app.host.parse().map_err(|e| {
            AppError::InternalServerError(format!("Invalid IP address: {}", e).into())
        })?;
    let address = SocketAddr::new(ip, config.app.port);

    let listener = TcpListener::bind(&address)
        .await
        .map_err(|e| AppError::InternalServerError(format!("Failed to bind: {}", e).into()))?;
    info!("▶ Server running on http://{}", &address);

    // Start the Axum server with graceful shutdown
    axum::serve(listener, app.into_make_service())
        .with_graceful_shutdown(shutdown_signal())
        .await
        .map_err(|e| {
            AppError::InternalServerError(format!("Failed to start application: {}", e).into())
        })?;

    Ok(())
}

async fn root() -> &'static str {
    "Hello, world!"
}

async fn shutdown_signal() {
    signal::ctrl_c()
        .await
        .expect("Failed to install Ctrl+C handler.");
    info!("Shutting down the server...")
}

fn init_tracing(config: &Logging) {
    // filter = Configで設定されているLoggingのレベル。
    let filter = config.level_filter();

    // ログのフォーマットを定義する。
    let fmt_layer = fmt::layer()
        .with_timer(UtcTime::rfc_3339())
        .with_level(true)
        .with_target(false)
        //.with_thread_ids(true)
        //.with_thread_names(true)
        ;

    // Json or Prettyでフォーマットする。
    if config.is_json() {
        tracing_subscriber::registry()
            .with(fmt_layer.json())
            .with(filter)
            .init()
    } else {
        tracing_subscriber::registry()
            .with(fmt_layer.pretty())
            .with(filter)
            .init()
    }
}

#[test]
fn debug() {
    let config = AppConfig::new().expect("Failed to create AppConfig");
    let postgres_url = config.get_postgres_url();
    println!("{}", postgres_url);
}


//// File: crates/v1/src/presentation/common_dto.rs
/// Defines the standard format for API responses.
use serde::Serialize;

/// Successful response structure.
#[derive(Debug, Serialize)]
pub struct ApiResponse<T> {
    /// The actual response data.
    pub data: T,
    /// A message describing the result or providing additional context.
    pub message: String,
    /// The time the response was generated (UNIX timestamp).
    pub timestamp: i64,
}

/// Error response structure.
#[derive(Debug, Serialize)]
pub struct ApiError {
    /// HTTP status code corresponding to the error.
    pub status: u16,
    /// A short, human-readable summary of the error.
    pub message: String,
    /// An optional detailed explanation of the error.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub detail: Option<String>,
    /// An optional URI or identifier of the instance where the error occurred.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    /// The time the error response was generated (UNIX timestamp).
    pub timestamp: i64,
}


//// File: crates/v1/src/presentation/mod.rs
pub mod common_dto;
pub mod response_helper;


//// File: crates/v1/src/presentation/response_helper.rs
//! Helpers for successful API responses.

use crate::presentation::common_dto::ApiResponse;
use axum::{Json, http::StatusCode, response::IntoResponse};
use chrono::Utc;
use serde::Serialize;

/// Wraps any serializable payload into a unified success envelope.
pub fn api_ok<T: Serialize>(data: T) -> impl IntoResponse {
    let body = ApiResponse {
        data,
        message: "success".into(),
        timestamp: Utc::now().timestamp(),
    };
    (StatusCode::OK, Json(body))
}


